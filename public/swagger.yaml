openapi: 3.0.1
info:
  title: User Management
  description: User Management API documentation
  version: '0.1'
servers:
  - url: https://us-central1-itxi-train.cloudfunctions.net
paths:
  /app/users/getAllusers:
    get:
      description: API to get all users
      responses:
        '200':
          description: Fetched All Users
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net
  /app/users/createUser:
    post:
      description: API to create a users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        '200':
          description: Auto generated using Swagger Inspector
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net
  /app/users/updateUser/{uid}:
    put:
      description: API to change user's information
      parameters:
        - in: path
          name: uid
          required: true
          description: id of user that need to be updated
          schema:
            type: string 
            example: rj6PYn5eGAU5ANZyfojsQCtJV5t2
          
      requestBody:
          required: true
          description: Updated a User 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User has been updated
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net
  /app/users/getUser/{uid}:
    get:
      description: API to get user's information
      parameters:
        - in: path
          name: uid
          required: true
          description: id of user that need to be fetched
          schema:
            type: string 
            example: rj6PYn5eGAU5ANZyfojsQCtJV5t2    
      responses:
        '200':
          description: User has been fetched
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net
  /app/users/deleteUser/{uid}:
    delete:
      description: API to delete user's information
      parameters:
        - in: path
          name: uid
          required: true
          description: id of user that need to be fetched
          schema:
            type: string 
            example: rj6PYn5eGAU5ANZyfojsQCtJV5t2    
      responses:
        '200':
          description: User has been deleted
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net
components:
  schemas:
    User:
      description: contain user's infomation
      properties:
        firstName:
          type: string
          example: Ali                
        lastName:
          type: string
          example: Ozeir              
        role:
          type: string
          example: Developer
        email:
          type: string
          example: ali-ozeir-test-22@gmail.com
    UserCreation:
      description: contain user's infomation
      properties:
        firstName:
          type: string
          example: John      
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: password
        phoneNumber:
          type: string
          example: +96100112233       
        role:
          type: string
          example: Developer
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
# 2) Apply the security globally to all operations
security:
  - bearerAuth: []  