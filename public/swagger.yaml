openapi: 3.0.1
info:
  title: User Management
  description: User Management API documentation
  version: '0.1'
servers:
  - url: https://us-central1-itxi-train.cloudfunctions.net
paths:
  /signin:
    post:
      tags: [Authentication]
      description: Sign in user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                email:
                  type: string
            example:
              email: johndoe@itxi.net
              password: johndoe123
      responses:
        '200':
          description: User Successfully Signed In
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationInfo'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message: 
                        type: string
              examples:
                Response 1:
                  value: { "status": 401, "error": {"code": "auth/user-not-found","message": "Invalid Email. Please check it, and try again!"}}
                Response 2:
                  value: { "status": 401, "error": {"code": "auth/wrong-password","message": "Wrong Password!"}}                    
        '428':
          description: Multi-factor Authentication Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Multi-FactorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /signup:
    post:
      tags: [Authentication]
      description: Sign Up
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                email:
                  type: string
            example:
              email: alioz-testing123@gmail.com
              password: password123
      responses:
        '201':
          description: User Successfully Signed Up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationInfo'
        '409':
          description: Email Already Exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
              example:
                status: 409
                error:
                  code: auth/email-already-exists
                  message: The email address is already in use by another account.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/getAllUsers:
    get:
      tags: [User Management]
      description: Get all users (Only Admins can call this API)
      responses:
        '200':
          description: Users have been Fetched Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched All Users Successfully!
                  data: 
                    type: object
                    properties:
                      uid:
                        type: object
                        properties:
                          data:
                            type: object
                            properties:
                              firstName:
                                type: string
                                example: Ali
                              lastName:
                                type: string
                                example: Ozeir
                              role:
                                type: string
                                example: admin
                              email:
                                type: string
                                example: alioz-testing1234@gmail.com
                          disabled:
                            type: boolean
                            example: false
                    example:
                      { "RN93D6ieSwfZ7Lkn8Eeodr7BNfu2": {
                            "data": {
                            "firstName": "Ali",
                             "lastName": "Ozeir",
                              "role": "Deve",
                              "email": "alioz-testing@gmail.com"
                            },
                            "disabled": false
                        },"uRcxW1fsNRUjP2oRphqM2z3s7Qe2": {
                            "data": {
                                "firstName": "Amin",
                                "lastName": "Atwi",
                                "role": "",
                                "email": "amin.atwi@itxi.net"
                            },
                            "disabled": true
                        }, }
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden. Only Admins can Access these info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 403
                message: You're not allowed to access this information.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/createUser:
    post:
      tags: [User Management]
      description: Create new user (Only Admins can call this API)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
      responses:
        '201':
          description: User Successfully Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden. Only Admins can Access these info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 403
                message: You're not allowed to access this information.
        '409':
          description: Email Already Exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
              example:
                status: 409
                error:
                  code: auth/email-already-exists
                  message: The email address is already in use by another account.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/updateUser/{uid}:
    put:
      tags: [User Management]
      description: Change user's information (Only Admins can call this API)
      parameters:
        - in: path
          name: uid
          required: true
          description: id of user that need to be updated
          schema:
            type: string 
            example: rj6PYn5eGAU5ANZyfojsQCtJV5t2
          
      requestBody:
          required: true
          description: Updated a User 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormattedUser'
      responses:
        '200':
          description: User has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: 
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      role:
                        type: string
                  message:
                    type: string
                  success:
                    type: boolean
                  versionNumber:
                    type: string
              example:
                user: {firstName: Ali,lastName: Ozeir,role: Developer, email: alioz-testing@gmail.com}
                message: success
                success: true
                versionNumber: 0.1.0
                
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden. Only Admins can Access these info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 403
                message: You're not allowed to access this information.
        '404':
          description: UserID not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
              example:
                status: 404
                error:
                  code: auth/user-not-found
                  message: There is no user record corresponding to the provided identifier.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/getUser/{uid}:
    get:
      tags: [User Management]
      description: Get Single user's information (Only Admins can call this API)
      parameters:
        - in: path
          name: uid
          required: true
          description: id of user that need to be fetched
          schema:
            type: string 
            example: rj6PYn5eGAU5ANZyfojsQCtJV5t2    
      responses:
        '200':
          description: User has been Fetched Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden. Only Admins can Access these info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 403
                message: You're not allowed to access this information.
        '404':
          description: UserID not found 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
              example:
                status: 404
                error:
                  code: auth/user-not-found
                  message: There is no user record corresponding to the provided identifier.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/deleteUser/{uid}:
    delete:
      tags: [User Management]
      description: Delete a user (Only Admins can call this API)
      parameters:
        - in: path
          name: uid
          required: true
          description: id of user that need to be fetched
          schema:
            type: string 
            example: rj6PYn5eGAU5ANZyfojsQCtJV5t2    
      responses:
        '200':
          description: User has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden. Only Admins can Access these info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 403
                message: You're not allowed to access this information.
        '404':
          description: UserID not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
              example:
                status: 500
                error:
                  code: auth/user-not-found
                  message: There is no user record corresponding to the provided identifier.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
    servers:
      - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/disableInactiveUsers:
    post:
      tags: [Cron Jobs]
      description: Disable Inactive Users depending on the number of days they haven't signed in
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                NumDays:
                  type: integer
            example:
               NumDays: 50
      responses:
        '200':
          description: Successfully Disabled Some Users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  disabledUsersEmails:
                    type: array
                    items:
                      type: string
              examples:
                Response 1:
                    value:                
                      message: Some Users have been disabled Successfully!
                      disabledUsersEmails: [ ali.ozeir@itxi.net , alioz-testing@itxi.net ]
                Response 2:
                  value:                
                    message: No Inactive users to disable!
                    disabledUsersEmails: []
                
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden. Only Admins can Access these info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 403
                message: You're not allowed to access this information.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/sendPasswordResetEmail:
    post:
      tags: [Used APIs]
      description: Send Password Reset Email to the User based on the email given in the request body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
            example:
              email: aozeir5@gmail.com
      responses:
        '200':
          description: Password Reset Email has been sent Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Hi aozeir5@gmail.com, You have Successfully Received Password Reset Email
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 404
                message: This email doesn't belong to any user!
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/setPasswordInDB:
    post:
      tags: [Used APIs]
      description: Hash the new password we are getting from the body, then Set it in Firestore
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                hashPassword:
                  type: string
            example:
              password: password123
      responses:
        '201':
          description: New Password has been added to firestore
          content:
            application/json:
              schema:
                type: string
                properties:
                  message:
                    type: string
              example:
                message: Hashed Password has been Successfully added to Firestore!
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/
  /admin/checkPreviousPasswords:
    post:
      tags: [Used APIs]
      description: Gets the hashed passwords from Firestore then compare them with the new password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                EncryptedPassword:
                  type: string
            example:
              password: password123
      responses:
        '200':
          description: Passwords Doesn't Match!
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: New Password doesn't Match any Previous Password!
        '204':
          description: Password matches with one of the passwords stored in DB
        '404':
          description: Passwords not found in Firestore
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No Passwords in Firestore!
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
      servers:
        - url: https://us-central1-itxi-train.cloudfunctions.net/

components: 
  schemas:
    FormattedUser:
      description: contain user's information
      properties:
        firstName:
          type: string
          example: Ali                
        lastName:
          type: string
          example: Ozeir              
        role:
          type: string
          example: Developer
        disabled:
          type: boolean
          example: false
    UserCreationRequest:
      description: contain user's information
      properties:
        firstName:
          type: string
          example: John      
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: password      
        role:
          type: string
          example: Developer
    AuthenticationInfo:
      description: contain user's information after successful sign in process
      properties:
        message:
          type: string
          example: User Successfully Signed In/Up
        user:
          type: object
          properties:
            uid:
              type: string
              example: A4F8A7gCnXexHVgNsCCXVzmPqn02      
            email:
              type: string
              example: johndoe@itxi.net
            emailverified:
              type: boolean
              example: true
            displayName:
              type: string
              example: John Doe
            isAnonymous:
              type: boolean
              example: false       
            providerData:
              type: array
              items:
                type: object
                properties:
                  providerId:
                    type: string
                    example: password
                  uid: 
                    type: string
                    example: johndoe@itxi.net
                  displayName:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: johndoe@itxi.net
                  phoneNumber:
                    type: string
                    example: null    
                  photoURL:
                    type: string
                    example: null
            stsTokenManager:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: AFxQ4_pGwaMtzUbce...
                accessToken:
                  type: string
                  example: AFxQ4_pGwaMtzUbce...
                expirationTime:
                  type: integer
                  example: 1640855434854
            createdAt:
              type: string
              example: 1640791960313
            lastLoginAt:
              type: string
              example: 1640844713375
            apiKey:
              type: string
              example: AIzaSyD1k...
            appName:
              type: string
              example: '[DEFAULT]'
    UserInfo:
      description: contain all user's information after successful fetch process
      properties:
        message:
          type: string
          example: success
        user:
          type: object
          properties:
            uid:
              type: string
              example: A4F8A7gCnXexHVgNsCCXVzmPqn02      
            email:
              type: string
              example: johndoe@itxi.net
            emailverified:
              type: boolean
              example: true
            displayName:
              type: string
              example: John Doe
            metadata:
              type: object
              properties:
                lastSignInTime: 
                  type: string
                  example: Thu, 30 Dec 2021 07:50:39 GMT
                creationTime: 
                  type: string
                  example: Thu, 30 Dec 2021 06:32:30 GMT
            customClaims:
              type: object
              properties:
                role:
                  type: string
                  example: admin
            providerData:
              type: array
              items:
                type: object
                properties:
                  providerId:
                    type: string
                    example: password
                  uid: 
                    type: string
                    example: johndoe@itxi.net
                  displayName:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: johndoe@itxi.net
    UserCreationResponse:
      description: contain all user's information after successful creating process
      properties:
        message:
          type: string
          example: User Successfully Created
        user:
          type: object
          properties:
            uid:
              type: string
              example: A4F8A7gCnXexHVgNsCCXVzmPqn02      
            email:
              type: string
              example: johndoe@itxi.net
            emailverified:
              type: boolean
              example: true
            displayName:
              type: string
              example: John Doe
            metadata:
              type: object
              properties:
                lastSignInTime: 
                  type: string
                  example: null
                creationTime: 
                  type: string
                  example: Thu, 30 Dec 2021 06:32:30 GMT
            tokensValidAfterTime:
              type: string
              example: Mon, 03 Jan 2022 06:24:55 GMT
            providerData:
              type: array
              items:
                type: object
                properties:
                  providerId:
                    type: string
                    example: password
                  uid: 
                    type: string
                    example: johndoe@itxi.net
                  displayName:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: johndoe@itxi.net
    Multi-FactorResponse:
      description: Describe the response for users who are enrolled with Multi-factor authentication
      properties:
        status:
          type: integer
          example: 428
        error:
          type: object
          properties:
            code:
              type: string
              example: auth/multi-factor-auth-required      
            customData:
              type: object
              properties:
                appName:
                  type: string
                  example: '[DEFAULT]'
                _serverResponse:
                  type: object
                  properties:
                    kind: 
                      type: string
                      example: identitytoolkit#VerifyPasswordResponse
                    localId:
                      type: string
                      example: tptkiV************31YZW2
                    email: 
                      type: string
                      example: aozeir5@gmail.com
                    registered:
                      type: boolean
                      example: true
                    mfaPendingCredential:
                      type: string
                      example: AMzJoSmLvMRU5ldGvg63lSGthMKPt...
                    mfaInfo:
                      type: array
                      items: 
                        type: object
                        properties:
                          phoneInfo:
                            type: string
                            example: '+******1742'
                          mfaEnrollmentId:
                            type: string
                            example: d490758a-****-4**d-****-853****c2249
                          displayName:
                            type: string
                            example: phone number
                          enrolledAt: 
                            type: string
                            example: '2021-12-27T10:14:46.913040Z'
                operationType:
                  type: string
                  example: signIn
            name:
              type: string
              example: FirebaseError
            operationType:
              type: string
              example: signIn
    UnauthorizedResponse: 
      description: Response for Unauthorized Requests
      properties:
        statusCode:
          type: integer
          example: 401
        message:
          type: string
          example: not authorized.
    ServerErrorResponse:
      description: Schema for Internal Server Error
      properties:
        status:
          type: integer
          example: 500
        error:
          type: object
          properties:
            code:
              type: string
              example: Web server is too busy.
            message:
              type: string
              example: Unfortunately we can't respond right now, please try again later
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT  
security:
  - bearerAuth: []